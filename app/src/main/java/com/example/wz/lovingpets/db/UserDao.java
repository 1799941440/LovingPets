package com.example.wz.lovingpets.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.wz.lovingpets.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Void> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property DepartmentId = new Property(4, int.class, "departmentId", false, "DEPARTMENT_ID");
        public final static Property RoleType = new Property(5, int.class, "roleType", false, "ROLE_TYPE");
        public final static Property PushId = new Property(6, String.class, "pushId", false, "PUSH_ID");
        public final static Property Head = new Property(7, String.class, "head", false, "HEAD");
        public final static Property Photo = new Property(8, String.class, "photo", false, "PHOTO");
        public final static Property StudentOrEmployee_id = new Property(9, int.class, "studentOrEmployee_id", false, "STUDENT_OR_EMPLOYEE_ID");
        public final static Property BeLongToGroup = new Property(10, String.class, "beLongToGroup", false, "BE_LONG_TO_GROUP");
        public final static Property DepartmentName = new Property(11, String.class, "departmentName", false, "DEPARTMENT_NAME");
        public final static Property SectionName = new Property(12, String.class, "sectionName", false, "SECTION_NAME");
        public final static Property CollegeName = new Property(13, String.class, "collegeName", false, "COLLEGE_NAME");
        public final static Property IsDelete = new Property(14, String.class, "isDelete", false, "IS_DELETE");
        public final static Property CollegeId = new Property(15, int.class, "collegeId", false, "COLLEGE_ID");
        public final static Property IsWeb = new Property(16, boolean.class, "isWeb", false, "IS_WEB");
        public final static Property Token = new Property(17, String.class, "token", false, "TOKEN");
        public final static Property Authority = new Property(18, int.class, "authority", false, "AUTHORITY");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"PASSWORD\" TEXT," + // 3: password
                "\"DEPARTMENT_ID\" INTEGER NOT NULL ," + // 4: departmentId
                "\"ROLE_TYPE\" INTEGER NOT NULL ," + // 5: roleType
                "\"PUSH_ID\" TEXT," + // 6: pushId
                "\"HEAD\" TEXT," + // 7: head
                "\"PHOTO\" TEXT," + // 8: photo
                "\"STUDENT_OR_EMPLOYEE_ID\" INTEGER NOT NULL ," + // 9: studentOrEmployee_id
                "\"BE_LONG_TO_GROUP\" TEXT," + // 10: beLongToGroup
                "\"DEPARTMENT_NAME\" TEXT," + // 11: departmentName
                "\"SECTION_NAME\" TEXT," + // 12: sectionName
                "\"COLLEGE_NAME\" TEXT," + // 13: collegeName
                "\"IS_DELETE\" TEXT," + // 14: isDelete
                "\"COLLEGE_ID\" INTEGER NOT NULL ," + // 15: collegeId
                "\"IS_WEB\" INTEGER NOT NULL ," + // 16: isWeb
                "\"TOKEN\" TEXT," + // 17: token
                "\"AUTHORITY\" INTEGER NOT NULL );"); // 18: authority
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
        stmt.bindLong(5, entity.getDepartmentId());
        stmt.bindLong(6, entity.getRoleType());
 
        String pushId = entity.getPushId();
        if (pushId != null) {
            stmt.bindString(7, pushId);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(8, head);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(9, photo);
        }
        stmt.bindLong(10, entity.getStudentOrEmployee_id());
 
        String beLongToGroup = entity.getBeLongToGroup();
        if (beLongToGroup != null) {
            stmt.bindString(11, beLongToGroup);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(12, departmentName);
        }
 
        String sectionName = entity.getSectionName();
        if (sectionName != null) {
            stmt.bindString(13, sectionName);
        }
 
        String collegeName = entity.getCollegeName();
        if (collegeName != null) {
            stmt.bindString(14, collegeName);
        }
 
        String isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindString(15, isDelete);
        }
        stmt.bindLong(16, entity.getCollegeId());
        stmt.bindLong(17, entity.getIsWeb() ? 1L: 0L);
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(18, token);
        }
        stmt.bindLong(19, entity.getAuthority());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
        stmt.bindLong(5, entity.getDepartmentId());
        stmt.bindLong(6, entity.getRoleType());
 
        String pushId = entity.getPushId();
        if (pushId != null) {
            stmt.bindString(7, pushId);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(8, head);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(9, photo);
        }
        stmt.bindLong(10, entity.getStudentOrEmployee_id());
 
        String beLongToGroup = entity.getBeLongToGroup();
        if (beLongToGroup != null) {
            stmt.bindString(11, beLongToGroup);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(12, departmentName);
        }
 
        String sectionName = entity.getSectionName();
        if (sectionName != null) {
            stmt.bindString(13, sectionName);
        }
 
        String collegeName = entity.getCollegeName();
        if (collegeName != null) {
            stmt.bindString(14, collegeName);
        }
 
        String isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindString(15, isDelete);
        }
        stmt.bindLong(16, entity.getCollegeId());
        stmt.bindLong(17, entity.getIsWeb() ? 1L: 0L);
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(18, token);
        }
        stmt.bindLong(19, entity.getAuthority());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.getInt(offset + 4), // departmentId
            cursor.getInt(offset + 5), // roleType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pushId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // head
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // photo
            cursor.getInt(offset + 9), // studentOrEmployee_id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // beLongToGroup
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // departmentName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // sectionName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // collegeName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // isDelete
            cursor.getInt(offset + 15), // collegeId
            cursor.getShort(offset + 16) != 0, // isWeb
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // token
            cursor.getInt(offset + 18) // authority
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDepartmentId(cursor.getInt(offset + 4));
        entity.setRoleType(cursor.getInt(offset + 5));
        entity.setPushId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHead(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhoto(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStudentOrEmployee_id(cursor.getInt(offset + 9));
        entity.setBeLongToGroup(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDepartmentName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSectionName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCollegeName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsDelete(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCollegeId(cursor.getInt(offset + 15));
        entity.setIsWeb(cursor.getShort(offset + 16) != 0);
        entity.setToken(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAuthority(cursor.getInt(offset + 18));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(User entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(User entity) {
        return null;
    }

    @Override
    public boolean hasKey(User entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
