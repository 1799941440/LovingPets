package com.example.wz.lovingpets.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.wz.lovingpets.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Void> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", false, "ID");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Identity = new Property(3, Integer.class, "identity", false, "IDENTITY");
        public final static Property Phone = new Property(4, String.class, "phone", false, "PHONE");
        public final static Property Province = new Property(5, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(6, String.class, "city", false, "CITY");
        public final static Property FullAddress = new Property(7, String.class, "fullAddress", false, "FULL_ADDRESS");
        public final static Property Balance = new Property(8, float.class, "balance", false, "BALANCE");
        public final static Property Sex = new Property(9, String.class, "sex", false, "SEX");
        public final static Property Age = new Property(10, Integer.class, "age", false, "AGE");
        public final static Property ShopId = new Property(11, Integer.class, "shopId", false, "SHOP_ID");
        public final static Property ShopName = new Property(12, String.class, "shopName", false, "SHOP_NAME");
        public final static Property ShoppingcartId = new Property(13, Integer.class, "shoppingcartId", false, "SHOPPINGCART_ID");
        public final static Property Card = new Property(14, String.class, "card", false, "CARD");
        public final static Property Name = new Property(15, String.class, "name", false, "NAME");
        public final static Property Icon = new Property(16, String.class, "icon", false, "ICON");
        public final static Property CommomAddressId = new Property(17, Integer.class, "commomAddressId", false, "COMMOM_ADDRESS_ID");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"PASSWORD\" TEXT," + // 2: password
                "\"IDENTITY\" INTEGER," + // 3: identity
                "\"PHONE\" TEXT," + // 4: phone
                "\"PROVINCE\" TEXT," + // 5: province
                "\"CITY\" TEXT," + // 6: city
                "\"FULL_ADDRESS\" TEXT," + // 7: fullAddress
                "\"BALANCE\" REAL NOT NULL ," + // 8: balance
                "\"SEX\" TEXT," + // 9: sex
                "\"AGE\" INTEGER," + // 10: age
                "\"SHOP_ID\" INTEGER," + // 11: shopId
                "\"SHOP_NAME\" TEXT," + // 12: shopName
                "\"SHOPPINGCART_ID\" INTEGER," + // 13: shoppingcartId
                "\"CARD\" TEXT," + // 14: card
                "\"NAME\" TEXT," + // 15: name
                "\"ICON\" TEXT," + // 16: icon
                "\"COMMOM_ADDRESS_ID\" INTEGER);"); // 17: commomAddressId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        Integer identity = entity.getIdentity();
        if (identity != null) {
            stmt.bindLong(4, identity);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(6, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(7, city);
        }
 
        String fullAddress = entity.getFullAddress();
        if (fullAddress != null) {
            stmt.bindString(8, fullAddress);
        }
        stmt.bindDouble(9, entity.getBalance());
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(10, sex);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(11, age);
        }
 
        Integer shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindLong(12, shopId);
        }
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(13, shopName);
        }
 
        Integer shoppingcartId = entity.getShoppingcartId();
        if (shoppingcartId != null) {
            stmt.bindLong(14, shoppingcartId);
        }
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(15, card);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(16, name);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(17, icon);
        }
 
        Integer commomAddressId = entity.getCommomAddressId();
        if (commomAddressId != null) {
            stmt.bindLong(18, commomAddressId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        Integer identity = entity.getIdentity();
        if (identity != null) {
            stmt.bindLong(4, identity);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(6, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(7, city);
        }
 
        String fullAddress = entity.getFullAddress();
        if (fullAddress != null) {
            stmt.bindString(8, fullAddress);
        }
        stmt.bindDouble(9, entity.getBalance());
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(10, sex);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(11, age);
        }
 
        Integer shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindLong(12, shopId);
        }
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(13, shopName);
        }
 
        Integer shoppingcartId = entity.getShoppingcartId();
        if (shoppingcartId != null) {
            stmt.bindLong(14, shoppingcartId);
        }
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(15, card);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(16, name);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(17, icon);
        }
 
        Integer commomAddressId = entity.getCommomAddressId();
        if (commomAddressId != null) {
            stmt.bindLong(18, commomAddressId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // identity
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // province
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // city
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fullAddress
            cursor.getFloat(offset + 8), // balance
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sex
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // age
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // shopId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // shopName
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // shoppingcartId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // card
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // name
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // icon
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17) // commomAddressId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIdentity(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProvince(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCity(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFullAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBalance(cursor.getFloat(offset + 8));
        entity.setSex(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAge(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setShopId(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setShopName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setShoppingcartId(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setCard(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIcon(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCommomAddressId(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(User entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(User entity) {
        return null;
    }

    @Override
    public boolean hasKey(User entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
